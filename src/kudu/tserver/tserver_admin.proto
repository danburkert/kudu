// Copyright (c) 2014, Cloudera, inc.
// Confidential Cloudera Information: Covered by NDA.
package kudu.tserver;

option java_package = "org.kududb.tserver";

import "kudu/common/common.proto";
import "kudu/consensus/metadata.proto";
import "kudu/tserver/tserver.proto";

message AlterSchemaRequestPB {
  required bytes tablet_id = 1;

  // TODO: Replace with the table descriptor
  // (Schema, Column IDs, Column Attributes)
  required SchemaPB schema = 2;

  required uint32 schema_version = 3;
  optional string new_table_name = 4;
}

message AlterSchemaResponsePB {
  optional TabletServerErrorPB error = 1;

  // The timestamp chosen by the server for this alter schema operation.
  // TODO KUDU-611 propagate timestamps with server signature.
  optional fixed64 timestamp = 2;
}

// A create tablet request.
message CreateTabletRequestPB {
  required bytes table_id = 1;
  required bytes tablet_id = 2;
  // In the following keys, the non-string components are in big-endian order
  required bytes start_key = 3;
  required bytes end_key = 4;

  required string table_name = 5;
  required SchemaPB schema = 6;

  // Initial consensus configuration for the tablet.
  required consensus.RaftConfigPB config = 7;
}

message CreateTabletResponsePB {
  optional TabletServerErrorPB error = 1;
}

// A delete tablet request.
message DeleteTabletRequestPB {
  required bytes tablet_id = 1;

  // Reason the tablet is being deleted (for logging purposes)
  optional string reason = 2;
}

message DeleteTabletResponsePB {
  optional TabletServerErrorPB error = 1;
}

// Enum of the server's Tablet Manager state: currently this is only
// used for assertions, but this can also be sent to the master.
enum TSTabletManagerStatePB {
  UNKNOWN = 999;

  // Indicates that Tablet Manager is initializing.
  MANAGER_INITIALIZING = 0;

  // Indicates that Tablet Manager is running and can create new
  // tablets.
  MANAGER_RUNNING = 1;

  // Indicates that tablet manager is shutting down and no new tablets
  // can be created.
  MANAGER_QUIESCING = 2;

  // Tablet Manager has shutdown.
  MANAGER_SHUTDOWN = 3;
}

service TabletServerAdminService {

  rpc CreateTablet(CreateTabletRequestPB) returns (CreateTabletResponsePB);

  rpc DeleteTablet(DeleteTabletRequestPB) returns (DeleteTabletResponsePB);

  rpc AlterSchema(AlterSchemaRequestPB) returns (AlterSchemaResponsePB);
}
